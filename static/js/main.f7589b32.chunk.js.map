{"version":3,"sources":["components/Day/Day.js","components/Month/Month.js","App.js","serviceWorker.js","index.js"],"names":["week","Day","props","className","today","weekDay","toLowerCase","date","months","Month","days","currentDate","Date","daysOfMonth","getFullYear","getMonth","getDate","i","getDay","push","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAGIA,G,sBAAO,IACXA,EAAK,GAAK,SACVA,EAAK,GAAK,SACVA,EAAK,GAAK,UACVA,EAAK,GAAK,YACVA,EAAK,GAAK,WACVA,EAAK,GAAK,SACVA,EAAK,GAAK,WAWKC,MATf,SAAaC,GACX,OACE,yBAAKC,UAAW,OAASD,EAAME,MAAQJ,EAAKE,EAAMG,SAASC,eACzD,yBAAKH,UAAU,QAAQD,EAAMK,MAC7B,yBAAKJ,UAAU,WAAWH,EAAKE,EAAMG,YCZvCG,EAAS,GACbA,EAAO,GAAK,UACZA,EAAO,GAAK,WACZA,EAAO,GAAK,QACZA,EAAO,GAAK,QACZA,EAAO,GAAK,MACZA,EAAO,GAAK,OACZA,EAAO,GAAK,OACZA,EAAO,GAAK,SACZA,EAAO,GAAK,YACZA,EAAO,GAAK,UACZA,EAAO,IAAM,WACbA,EAAO,IAAM,WAkCEC,MAhCf,WASE,IARA,IAAIC,EAAO,GACLC,EAAc,IAAIC,KAClBC,EAAc,IAAID,KACtBD,EAAYG,cACZH,EAAYI,WAAa,EACzB,GACAC,UAEOC,EAAI,EAAGA,GAAKJ,EAAaI,IAAK,CACrC,IAAIZ,EAAU,IAAIO,KAChBD,EAAYG,cACZH,EAAYI,WACZE,GACAC,SAEEd,EAAQ,GACRa,IAAMN,EAAYK,YACpBZ,EAAQ,WAGVM,EAAKS,KAAK,kBAAC,EAAD,CAAKC,IAAK,MAAQH,EAAGV,KAAMU,EAAGZ,QAASA,EAASD,MAAOA,KAGnE,OACE,yBAAKD,UAAU,SACb,yBAAKA,UAAU,WAAWK,EAAOG,EAAYI,aAC7C,yBAAKZ,UAAU,QAAQO,KCjCdW,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCKcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7589b32.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Day.css\";\n\nlet week = [];\nweek[0] = \"Sunday\";\nweek[1] = \"Monday\";\nweek[2] = \"Tuesday\";\nweek[3] = \"Wednesday\";\nweek[4] = \"Thursday\";\nweek[5] = \"Friday\";\nweek[6] = \"Saturday\";\n\nfunction Day(props) {\n  return (\n    <div className={\"day \" + props.today + week[props.weekDay].toLowerCase()}>\n      <div className=\"date\">{props.date}</div>\n      <div className=\"weekday\">{week[props.weekDay]}</div>\n    </div>\n  );\n}\n\nexport default Day;\n","import React from \"react\";\nimport \"./Month.css\";\nimport Day from \"../Day/Day\";\n\nlet months = [];\nmonths[0] = \"January\";\nmonths[1] = \"February\";\nmonths[2] = \"March\";\nmonths[3] = \"April\";\nmonths[4] = \"May\";\nmonths[5] = \"June\";\nmonths[6] = \"July\";\nmonths[7] = \"August\";\nmonths[8] = \"September\";\nmonths[9] = \"October\";\nmonths[10] = \"November\";\nmonths[11] = \"December\";\n\nfunction Month() {\n  let days = [];\n  const currentDate = new Date();\n  const daysOfMonth = new Date(\n    currentDate.getFullYear(),\n    currentDate.getMonth() + 1,\n    0\n  ).getDate();\n\n  for (let i = 1; i <= daysOfMonth; i++) {\n    let weekDay = new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth(),\n      i\n    ).getDay();\n\n    let today = \"\";\n    if (i === currentDate.getDate()) {\n      today = \" today \";\n    }\n\n    days.push(<Day key={\"day\" + i} date={i} weekDay={weekDay} today={today} />);\n  }\n\n  return (\n    <div className=\"month\">\n      <div className=\"heading\">{months[currentDate.getMonth()]}</div>\n      <div className=\"days\">{days}</div>\n    </div>\n  );\n}\n\nexport default Month;\n","import React from \"react\";\nimport \"./App.css\";\nimport Month from \"./components/Month/Month\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Month />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}